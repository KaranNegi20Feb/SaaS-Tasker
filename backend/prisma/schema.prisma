generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  firstName      String
  lastName       String
  email          String           @unique
  bio            String?
  skills         String[]
  githubUsername String?
  avatar         String?
  githubUrl      String?
  twitterUrl     String?
  linkedinUrl    String?
  provider       String?
  password       String?
  salt           String?

  organizations  Organization[]   @relation("UserOrganizations")
  adminOf        Organization[]   @relation("OrganizationAdmin")
  tasks          Task[]
  requests       Request[]        @relation("UserRequests")

  @@map("users")
}

model Organization {
  id           String     @id @default(uuid())
  name         String
  adminId      String
  admin        User       @relation("OrganizationAdmin", fields: [adminId], references: [id])
  users        User[]     @relation("UserOrganizations")
  tasks        Task[]
  requests     Request[]  @relation("OrgRequests")

  @@map("organizations")
}

model Request {
  id              String       @id @default(uuid())
  name            String
  status          String       @default("PENDING") // PENDING | ACCEPTED | REJECTED
  userId          String
  organizationId  String
  user            User         @relation("UserRequests", fields: [userId], references: [id])
  organization    Organization @relation("OrgRequests", fields: [organizationId], references: [id])

  @@map("requests")
}

model Task {
  id              String         @id @default(uuid())
  title           String
  description     String
  userId          String?
  organizationId  String
  status          String         @default("PENDING")
  user            User?          @relation(fields: [userId], references: [id])
  organization    Organization   @relation(fields: [organizationId], references: [id])

  @@map("tasks")
}
